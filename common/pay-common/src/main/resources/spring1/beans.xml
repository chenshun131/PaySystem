<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		                   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- 配置一个 bean -->
    <bean id="helloWorld" class="spring1.helloworld.HelloWorld">
        <!-- 为属性赋值 -->
        <property name="user" value="Jerry"/>
    </bean>

    <!-- 配置一个 bean -->
    <bean id="helloWorld2" class="spring1.helloworld.HelloWorld">
        <!-- 为属性赋值 -->
        <!-- 通过属性注入: 通过 setter 方法注入属性值 -->
        <property name="user" value="Tom"/>
    </bean>

    <!-- 通过构造器注入属性值 -->
    <bean id="helloWorld3" class="spring1.helloworld.HelloWorld">
        <!-- 要求 : 在 Bean 中必须有对应的构造器.  -->
        <constructor-arg value="Mike"/>
    </bean>

    <!-- 若一个 bean 有多个构造器, 如何通过构造器来为 bean 的属性赋值 -->
    <!-- 可以根据 index 和 value 进行更加精确的定位 (了解) -->
    <bean id="car" class="spring1.helloworld.Car">
        <constructor-arg value="KUGA" index="1"/>
        <constructor-arg value="ChangAnFord" index="0"/>
        <constructor-arg value="250000" type="float"/>
    </bean>

    <bean id="car2" class="spring1.helloworld.Car">
        <constructor-arg value="ChangAnMazda"/>
        <!-- 若字面值中包含特殊字符, 则可以使用 CDATA 来进行赋值 (了解) -->
        <constructor-arg>
            <value><![CDATA[<ATARZA>]]></value>
        </constructor-arg>
        <constructor-arg value="180" type="int"/>
    </bean>

    <!-- 配置 bean -->
    <bean id="dao5" class="spring1.ref.Dao"/>

    <bean id="service" class="spring1.ref.Service">
        <!-- 通过 ref 属性值指定当前属性指向哪一个 bean! -->
        <property name="dao" ref="dao5"/>
    </bean>

    <!-- 声明使用内部 bean -->
    <bean id="service2" class="spring1.ref.Service">
        <property name="dao">
            <!-- 内部 bean, 类似于匿名内部类对象. 不能被外部的 bean 来引用, 也没有必要设置 id 属性 -->
            <bean class="spring1.ref.Dao">
                <property name="dataSource" value="c3p0"/>
            </bean>
        </property>
    </bean>

    <bean id="action" class="spring1.ref.Action">
        <property name="service" ref="service2"/>
        <!-- 设置级联属性(了解) -->
        <property name="service.dao.dataSource" value="DBCP2"/>
    </bean>

    <bean id="dao2" class="spring1.ref.Dao">
        <!-- 为 Dao 的 dataSource 属性赋值为 null, 若某一个 bean 的属性值不是 null, 使用时需要为其设置为 null(了解) -->
        <property name="dataSource">
            <null/>
        </property>
    </bean>

    <!-- 装配集合属性 -->
    <bean id="user" class="spring1.helloworld.User">
        <property name="userName" value="Jack"/>
        <property name="cars">
            <!-- 使用 list 元素来装配集合属性 -->
            <list>
                <ref bean="car"/>
                <ref bean="car2"/>
            </list>
        </property>
    </bean>

    <!-- 声明集合类型的 bean -->
    <util:list id="cars">
        <ref bean="car"/>
        <ref bean="car2"/>
    </util:list>

    <bean id="user2" class="spring1.helloworld.User">
        <property name="userName" value="Rose"/>
        <!-- 引用外部声明的 list -->
        <property name="cars" ref="cars"/>
    </bean>

    <bean id="user3" class="spring1.helloworld.User" p:cars-ref="cars" p:userName="Titannic"/>

    <!-- bean 的配置能够继承吗 ? 使用 parent 来完成继承 -->
    <bean id="user4" parent="user" p:userName="Bob"/>

    <bean id="user6" parent="user" p:userName="维多利亚"/>

    <!-- 测试 depents-on -->
    <bean id="user5" parent="user" p:userName="Backham" depends-on="user6"/>

</beans>
